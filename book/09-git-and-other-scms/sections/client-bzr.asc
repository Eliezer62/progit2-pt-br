==== Git e Bazaar

Entre os DVCS, outro famoso é http://bazaar.canonical.com/[Bazaar].
Bazaar é gratuito e código aberto, faz parte do http://www.gnu.org/[GNU Project].
Comporta-se muito diferente do Git.
Algumas vezes, para fazer as mesmas coisas como o Git, é preciso usar uma keyword diferente e algumas são comuns, porém não tem o mesmo significado.
Em particular, o gerenciamento de branch é muito diferente e pode causar confusão, especialmente quando alguém vem do universo do Git.
Entretanto, é possível trabalhar em um repositório Bazaar de um Git.

Existem muitos projetos que permitem usar o Git como um cliente Bazaar.
Aqui nós usaremos o projeto de Felipe Contreras que você pode em encontrar em https://github.com/felipec/git-remote-bzr[].
Para instalar, você somente tem que baixar o arquivo git-remote-bzr em uma pasta que está listada em sua `$PATH` (variável de sistema).

[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

Você também precisa ter Bazaar instalado.
E é tudo!

===== Criando um repositório Git de um repositório Bazaar 

É simples de usar.
Basta clonar um repositório Bazaar prefixando-o em `bzr::`.
Uma vez que ambos Git e Bazaar fazem clones completos para sua máquina, é possível anexar um clone Git ao seu clone Bazaar, mas não é recomendado.
É muito mais fácil anexar ao seu clone Git diretamente para o mesmo lugar que seu clone Bazaar está anexado - o repositório central.

Vamos supor que você trabalha com repositório remoto que está no endereço `bzr+ssh://developer@mybazaarserver:myproject`.
Então você deve cloná-lo da seguinte maneira:

[source,console]
----
$ git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
$ cd myProject-Git
----

Em algum ponto, seu repositório foi criado, mas não está compactado para uso otimizado de disco.
É por isso que você deve limpar e compactar seu repositório Git, especialmente se for um grande repositório:

[source,console]
----
$ git gc --aggressive
----

===== Bazaar branches

Bazaar somente permite você clonar branches, mas um repositório pode conter diversos branches, e `git-remote-bzr` pode clonar todos.
Por exemplo, para clonar um branch:

[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk
----

E para clonar o repositório inteiro:

[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs
----

O segundo comando clona todos os branches contidos no repositório emacs; contudo, é possível apontar alguns branches:

[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

Alguns repositórios remotos não permitem listar seus branches, em caso que você precisa especificá-los manualmente e antes que você possa especificar a configuração no comando de clonagem, você pode achar isso mais fácil:

[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----

===== Ignore o que é ignorado com .bzrignore

Desde você está trabalhando em um projeto com Bazaar, você não deve criar um arquivo `.gitignore` porque você _pode_ acidentalmente modificar sob o seu controle de versão e outras pessoas trabalhando com Bazaar ficariam perturbadas.
A solução é criar um arquivo `.git/info/exclude` como uma ligação simbólica ou como um arquivo normal.
Nós vamos ver mais tarde como resolver esta questão.

Bazaar usa o mesmo modelo do Git para ignorar arquivos, mas também há duas características que não possuem equivalente no Git.
A descrição completa pode ser encontrada na http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/ignore-help.html[documentação].
As duas características são:

1. "!!" permitem ignorar certos padrões de arquivos até se eles foram especificados usando uma regra "!".
2. "RE:" no começo de uma linha permite especificar uma https://docs.python.org/3/library/re.html[expressão regular em Python] (Git somente permite globais de shell).

Como consequência, existem duas diferentes situações a serem consideradas:

1. Se o arquivo `.bzrignore` não contém nenhuma das especificações anteriores, então você pode simplesmente criar uma ligação simbólica no repositório: `ln -s .bzrignore .git/info/exclude`.
2. Caso contrário, você deve criar o arquivo `.git/info/exclude`  e adaptá-lo para ignorar exatamente os mesmos arquivos em `.bzrignore`.

Tanto faz qual caso é, você terá permanecer vigilante a qualquer mudança de `.bzrignore` para ter certeza o arquivo `.git/info/exclude` sempre reflete `.bzrignore`.
De fato, se o arquivo `.bzrignore` for mudado e conter uma ou mais linhas começando com "!!" ou "RE:", Git não será capaz de interpretar essas linhas, você terá de adaptar seu arquivo `.git/info/exclude`para ignorar os mesmo arquivos que `.bzrignore`.
Além disso, se o arquivo `.git/info/exclude` for uma ligação simbólica, você terá de primeiro deletar a ligação, copiar `.bzrignore` para `.git/info/exclude` e então adaptá-lo.
Contudo, seja cuidadoso com suas ações porque com Git é impossível incluir novamente um arquivo se o diretório pai dele foi excluído.

===== Fetch as mudanças de um repositório remoto

Para fetch (buscar) as mudanças de um repositório remoto, você deve dar pull (enviar) das mudanças como normalmente, usando comandos Git.
Supondo que suas mudanças estão no branch `master`, você merge (junta) ou rebase seu trabalho para o branch `origin/master`:

[source,console]
----
$ git pull --rebase origin
----

===== Push seu trabalho em um repositório remoto

Porque Bazaar também tem o conceito de merge commits, não será um problema se você push um merge commit.
Você pode trabalhar em um branch, merge as mudanças para `master` e push seu trabalho.
Então, você pode criar seu branches, testar e commit seu trabalho normalmente.
Você finalmente push seu trabalho para o repositório Bazaar:

[source,console]
----
$ git push origin master
----

===== Caveats

Framework remote-helpers do Git tem algumas limitações que se aplicam.
Em particular, esses comandos não funcionam:

* git push origin :branch-to-delete (Bazaar não pode aceitar remoções de referência desta maneira.)
* git push origin old:new (irá push 'old')
* git push --dry-run origin branch (irá fazer um push)

===== Resumo

Uma vez que os modelos do Git e do Bazaar são similares, não existe muitas dificuldades além do limite.
Enquanto se tenha cuidado com as limitações e esteja sempre consciente que repositório remoto não é nativamente Git, você estará tranquilo.
